(()=>{"use strict";const e=class{constructor(e,t,o=""){this.title=e,this.description=t,this.dueDate=o}getTitle(){return this.title}setTitle(e){return this.title=e}getDescription(){return this.description}setDescription(e){return this.description=e}getDueDate(){if(""==this.dueDate){let e=new Date,t=e.getDate(),o=e.getMonth()+1,n=e.getFullYear();return this.dueDate=`${n}-${o}-${t}`}{let e=this.dueDate.split("-"),t=new Date(e[0],e[1],e[2]),o=t.getDate(),n=t.getMonth(),s=t.getFullYear();return this.dueDate=`${s}-${n}-${o}`}}setDate(e){return this.dueDate=e}},t=class{constructor(e){this.name=e,this.todos=[]}getName(){return this.name}setName(e){return this.name=e}getTodos(){return this.todos}getTodo(e){return this.todos.find((t=>t.title===e.title))}addTodo(e){this.todos.find((t=>t.title===e.title))||this.todos.push(e)}deleteTodo(e){return this.todos=this.todos.filter((t=>t.title!==e))}};function o(e){const t=new Date;return e.getDate()===t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function n(e){const t=new Date;return e.getDate()<t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function s(e,t){const o=new Date;return e.getDate()>o.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()&&e.getDate()<=t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function d(e){let t=e.split("-"),o=t[2],n=t[1],s=t[0];return new Date(s,n-1,o)}function i(){let e=new Date,t=e.getDate(),o=e.getMonth(),n=e.getFullYear(),s=function(e,t){return new Date(t,e,0).getDate()}(o,n),d=t+6,i=o,a=n;return d>s&&(d=1,i+=1,13===i&&(i=1,a+=1)),new Date(a,i,d)}const a=new class{constructor(){this.projects=[],this.projects.push(new t("Today")),this.projects.push(new t("This Week")),this.projects.push(new t("This Month"))}getProjects(){return this.projects}getProject(e){return this.projects.find((t=>t.name===e))}addProject(e){this.projects.find((t=>t.name===e.name))||this.projects.push(e)}sortTodos(){let e=this.getProject("Today"),t=this.getProject("This Month"),a=this.getProject("This Week");!function(e,t,a){for(let l=0;l<e.getTodos().length;l++){let c=e.getTodos()[l],r=d(c.getDueDate()),u=i();o(r)||n(r)?(a.addTodo(c),e.deleteTodo(c.title)):s(r,u)&&(t.addTodo(c),e.deleteTodo(c.title))}}(t,a,e),function(e,t,a){for(let l=0;l<t.getTodos().length;l++){let c=t.getTodos()[l],r=d(c.getDueDate()),u=i();o(r)||n(r)?(a.addTodo(c),t.deleteTodo(c.title)):s(r,u)||(e.addTodo(c),t.deleteTodo(c.title))}}(t,a,e),function(e,t,a){for(let l=0;l<a.getTodos().length;l++){let c=a.getTodos()[l],r=d(c.getDueDate()),u=i();s(r,u)&&(t.addTodo(c),a.deleteTodo(c.title)),o(r)||s(r,u)||n(r)||(e.addTodo(c),a.deleteTodo(c.title))}}(t,a,e)}},l=a.getProject("Today"),c=a.getProject("This Week"),r=a.getProject("This Month"),u=document.querySelector(".main-board"),g=document.querySelector(".button-box"),h=document.querySelector(".todo-form"),m=document.querySelector(".fa-circle-xmark"),p=document.querySelector(".create-todo-btn");function D(){h.classList.toggle("invisible");let e=h.elements.item(0),t=h.elements.item(1),o=h.elements.item(2),n=h.elements.item(3);h.classList.contains("invisible")||t.focus(),e.value="today",t.value="",o.value="",n.value=""}function v(){u.textContent="";let e=["#FAEDCB","#C9E4DE","#C6DEF1","#D8CDF0","#F2C6DE","#F7D9C4"];for(let t=0;t<a.getProjects().length;t++){let o=T(a.getProjects()[t]),n=Math.floor(4*Math.random())+1,s=e[n];o.childNodes[0].style.backgroundColor=s,e.splice(n,1),u.appendChild(o)}}function T(e){const t=document.createElement("div");t.classList.add("project-box");const o=document.createElement("p");o.classList.add("project-header"),o.textContent=e.name;const n=e.getTodos();if(t.appendChild(o),0!=n.length){const o=document.createElement("div");o.classList.add("todo-box"),o.classList.add("visible");for(let t=0;t<n.length;t++){let s=f(n[t],e);s.style.backgroundColor=t%2==1?"#e4e4e4":"white",o.appendChild(s)}t.appendChild(o),t.addEventListener("click",(()=>{o.classList.toggle("visible")}))}return t}function f(e,t){const o=document.createElement("div");o.classList.add("todo");const n=document.createElement("input");n.classList.add("todo-checkbox"),n.setAttribute("type","checkbox");const s=document.createElement("p");s.classList.add("todo-title"),s.textContent=e.title;const d=document.createElement("p");d.classList.add("todo-date"),d.textContent=e.getDueDate();const i=document.createElement("div");i.classList.add("check-title-date"),i.append(n,s,d);const a=document.createElement("p");return a.classList.add("todo-description"),a.textContent=e.description,n.addEventListener("change",(n=>{n.target.checked&&(o.classList.add("disappear"),setTimeout((()=>{t.deleteTodo(e.title),o.remove()}),1e3))})),o.addEventListener("dblclick",(e=>{e.target!=s&&e.target!=n&&(a.classList.add("visible"),a.contentEditable=!0,a.focus(),E(a))})),a.addEventListener("click",(()=>{a.contentEditable=!0,a.focus(),E(a)})),a.addEventListener("keypress",(t=>{"Enter"===t.key&&(e.setDescription(a.textContent),a.blur(),a.contentEditable=!1)})),o.addEventListener("click",(e=>{e.target!=s&&e.target!=n&&""!=a.textContent&&e.target!=a&&a.classList.toggle("visible")})),s.addEventListener("click",(()=>{s.contentEditable=!0,a.contentEditable=!1,s.focus(),E(s)})),s.addEventListener("keypress",(t=>{"Enter"===t.key&&(e.setTitle(s.textContent),s.blur(),s.contentEditable=!1)})),o.append(i,a),o}function E(e){let t,o;document.createRange&&(t=document.createRange(),t.selectNodeContents(e),t.collapse(!1),o=window.getSelection(),o.removeAllRanges(),o.addRange(t))}g.addEventListener("click",D),m.addEventListener("click",D),p.addEventListener("click",(t=>{t.preventDefault();let o=h.elements.item(0),n=h.elements.item(1),s=h.elements.item(2),d=h.elements.item(3);if(""===d.value){const t=new e(n.value,s.value);"today"===o.value?l.addTodo(t):"this week"===o.value?c.addTodo(t):"this month"===o.value&&r.addTodo(t)}else{const t=new e(n.value,s.value,d.value);"today"===o.value?l.addTodo(t):"this week"===o.value?c.addTodo(t):"this month"===o.value&&r.addTodo(t)}o.value="today",n.value="",s.value="",d.value="",h.classList.add("invisible"),a.sortTodos(),v()})),v()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,