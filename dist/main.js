(()=>{"use strict";const t=class{constructor(t,e,o=""){this.title=t,this.description=e,this.dueDate=o}getTitle(){return this.title}setTitle(t){return this.title=t}getDescription(){return this.description}setDescription(t){return this.description=t}getDueDate(){if(""==this.date){let t=new Date;return t.getDate()+"/"+(t.getMonth()+1)+"/"+t.getFullYear()}return this.dueDate}setDate(t){return this.dueDate=t}},e=class{constructor(t){this.name=t,this.todos=[]}getName(){return this.name}setName(t){return this.name=t}getTodos(){return this.todos}getTodo(t){return this.todos.find((e=>e.title===t.title))}addTodo(t){this.todos.find((e=>e.title===t.title))||this.todos.push(t)}deleteTodo(t){return this.todos=this.todos.filter((e=>e.title!==t))}};let o=new t("Todo 1","new test for todo box 1"),s=new t("Todo 2","new test for todo box 2"),n=new t("Todo 3","new test for todo box 3"),d=new t("Todo 5","new test for date sorting","15/1/2025"),i=new t("Month test","testing month sort","26/1/2025");const r=new class{constructor(){this.projects=[],this.projects.push(new e("Today")),this.projects.push(new e("This Week")),this.projects.push(new e("This Month"))}getProjects(){return this.projects}getProject(t){return this.projects.find((e=>e.name===t))}addProject(t){this.projects.find((e=>e.name===t.name))||this.projects.push(t)}sortTodos(){let t=this.getProject("Today"),e=new Date,o=e.getDate(),s=e.getMonth()+1,n=e.getFullYear(),d=o+"/"+s+"/"+n,i=this.getProject("This Month"),r=this.getProject("This Week");for(let t=0;t<i.getTodos().length;t++){let e=i.getTodos()[t],d=e.getDueDate().split("/"),c=Number(d[0]),a=Number(d[1]),l=Number(d[2]),h=o+6,u=s,p=n;h>this.daysInMonth(s,n)&&(h=1,u+=1,13===u&&(u=1,p+=1));let g=new Date,m=new Date(p,u-1,h),T=new Date(l,a-1,c);T>=g&&T<=m&&(r.addTodo(e),i.deleteTodo(e.title))}for(let e=0;e<r.getTodos().length;e++){let o=r.getTodos()[e];o.getDueDate()===d&&(t.addTodo(o),r.deleteTodo(o.title))}}daysInMonth(t,e){return new Date(e,t,0).getDate()}},c=r.getProject("Today"),a=r.getProject("This Week"),l=r.getProject("This Month");c.addTodo(o),c.addTodo(s),c.addTodo(n),a.addTodo(d),l.addTodo(i),r.sortTodos();const h=document.querySelector(".main-board");function u(t){const e=document.createElement("div");e.classList.add("project-box");const o=document.createElement("p");o.classList.add("project-header"),o.textContent=t.name;const s=t.getTodos();if(e.appendChild(o),0!=s.length){const t=document.createElement("div");t.classList.add("todo-box"),t.classList.add("visible");for(let e=0;e<s.length;e++){let o=p(s[e]);o.style.backgroundColor=e%2==1?"#e4e4e4":"white",t.appendChild(o)}e.appendChild(t),e.addEventListener("click",(e=>{t.classList.contains("visible")?t.classList.remove("visible"):t.classList.add("visible")}))}return e}function p(t){const e=document.createElement("div");e.classList.add("todo");const o=document.createElement("input");o.setAttribute("type","checkbox"),o.setAttribute("checked-id","checkbox");const s=document.createElement("p");s.classList.add("todo-title"),s.textContent=t.title;const n=document.createElement("p");n.classList.add("todo-date"),n.textContent=t.getDueDate();const d=document.createElement("div");d.classList.add("check-title-date"),d.append(o,s,n);const i=document.createElement("p");return i.classList.add("todo-description"),i.textContent=t.description,e.addEventListener("click",(t=>{t.target!=s&&(i.classList.contains("visible")?i.classList.remove("visible"):i.classList.add("visible"))})),s.addEventListener("click",(()=>{s.contentEditable=!0})),e.append(d,i),e}!function(){let t=["#FAEDCB","#C9E4DE","#C6DEF1","#D8CDF0","#F2C6DE","#F7D9C4"];for(let e=0;e<r.getProjects().length;e++){let o=u(r.getProjects()[e]),s=Math.floor(5*Math.random()),n=t[s];o.childNodes[0].style.backgroundColor=n,t.splice(s,1),h.appendChild(o)}}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,