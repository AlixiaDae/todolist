(()=>{"use strict";const e=class{constructor(e,t,o=""){this.title=e,this.description=t,this.dueDate=o}getTitle(){return this.title}setTitle(e){return this.title=e}getDescription(){return this.description}setDescription(e){return this.description=e}getDueDate(){if(""==this.dueDate){let e=new Date,t=e.getDate(),o=e.getMonth()+1,n=e.getFullYear();return this.dueDate=`${n}-${o}-${t}`}{let e=this.dueDate.split("-"),t=new Date(e[0],e[1],e[2]),o=t.getDate(),n=t.getMonth(),s=t.getFullYear();return this.dueDate=`${s}-${n}-${o}`}}setDate(e){return this.dueDate=e}},t=class{constructor(e){this.name=e,this.todos=[]}getName(){return this.name}setName(e){return this.name=e}getTodos(){return this.todos}getTodo(e){return this.todos.find((t=>t.title===e.title))}addTodo(e){this.todos.find((t=>t.title===e.title))||this.todos.push(e)}deleteTodo(e){return this.todos=this.todos.filter((t=>t.title!==e))}};function o(e){const t=new Date;return e.getDate()===t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function n(e){const t=new Date;return e.getDate()<t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear()}function s(e,t){const o=new Date,n=e.getDate()>=o.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear();return(e.getDate()<=t.getDate()&&e.getMonth()===t.getMonth()&&e.getFullYear()===t.getFullYear())===n}function d(e){let t=e.split("-"),o=t[2],n=t[1],s=t[0];return new Date(s,n-1,o)}function i(){let e=new Date,t=e.getDate(),o=e.getMonth(),n=e.getFullYear(),s=function(e,t){return new Date(t,e,0).getDate()}(o,n),d=t+6,i=o,l=n;return d>s&&(d=1,i+=1,13===i&&(i=1,l+=1)),new Date(l,i,d)}const l=new class{constructor(){this.projects=[],this.projects.push(new t("Today")),this.projects.push(new t("This Week")),this.projects.push(new t("This Month"))}getProjects(){return this.projects}getProject(e){return this.projects.find((t=>t.name===e))}addProject(e){this.projects.find((t=>t.name===e.name))||this.projects.push(e)}sortTodos(){let e=this.getProject("Today"),t=this.getProject("This Month"),l=this.getProject("This Week");!function(e,t,l){for(let a=0;a<e.getTodos().length;a++){let r=e.getTodos()[a],c=d(r.getDueDate()),u=i();o(c)||n(c)?(l.addTodo(r),e.deleteTodo(r.title)):s(c,u)&&(t.addTodo(r),e.deleteTodo(r.title))}}(t,l,e),function(e,t,l){for(let a=0;a<t.getTodos().length;a++){let r=t.getTodos()[a],c=d(r.getDueDate()),u=i();(o(c)||n(c))&&(l.addTodo(r),t.deleteTodo(r.title)),s(c,u)||(e.addTodo(r),t.deleteTodo(r.title))}}(t,l,e),function(e,t,l){for(let a=0;a<l.getTodos().length;a++){let r=l.getTodos()[a],c=d(r.getDueDate()),u=i();s(c,u)&&(t.addTodo(r),l.deleteTodo(r.title)),o(c)||s(c,u)||n(c)||(e.addTodo(r),l.deleteTodo(r.title))}}(t,l,e)}},a=l.getProject("Today"),r=l.getProject("This Week"),c=l.getProject("This Month"),u=document.querySelector(".main-board"),h=document.querySelector(".button-box"),g=document.querySelector(".todo-form"),m=document.querySelector(".fa-circle-xmark"),D=document.querySelector(".create-todo-btn");function p(){g.classList.toggle("invisible");let e=g.elements.item(0),t=g.elements.item(1),o=g.elements.item(2),n=g.elements.item(3);e.value="today",t.value="",o.value="",n.value=""}function T(){u.textContent="";let e=["#FAEDCB","#C9E4DE","#C6DEF1","#D8CDF0","#F2C6DE","#F7D9C4"];for(let t=0;t<l.getProjects().length;t++){let o=v(l.getProjects()[t]),n=Math.floor(5*Math.random())+0,s=e[n];o.childNodes[0].style.backgroundColor=s,e.splice(n,1),u.appendChild(o)}}function v(e){const t=document.createElement("div");t.classList.add("project-box");const o=document.createElement("p");o.classList.add("project-header"),o.textContent=e.name;const n=e.getTodos();if(t.appendChild(o),0!=n.length){const e=document.createElement("div");e.classList.add("todo-box"),e.classList.add("visible");for(let t=0;t<n.length;t++){let o=f(n[t]);o.style.backgroundColor=t%2==1?"#e4e4e4":"white",e.appendChild(o)}t.appendChild(e),t.addEventListener("click",(t=>{e.classList.toggle("visible")}))}return t}function f(e){const t=document.createElement("div");t.classList.add("todo");const o=document.createElement("input");o.setAttribute("type","checkbox"),o.setAttribute("checked-id","checkbox");const n=document.createElement("p");n.classList.add("todo-title"),n.textContent=e.title;const s=document.createElement("p");s.classList.add("todo-date"),s.textContent=e.getDueDate();const d=document.createElement("div");d.classList.add("check-title-date"),d.append(o,n,s);const i=document.createElement("p");return i.classList.add("todo-description"),i.textContent=e.description,t.addEventListener("click",(e=>{e.target!=n&&i.classList.toggle("visible")})),n.addEventListener("click",(()=>{n.contentEditable=!0})),t.append(d,i),t}h.addEventListener("click",p),m.addEventListener("click",p),D.addEventListener("click",(t=>{t.preventDefault();let o=g.elements.item(0),n=g.elements.item(1),s=g.elements.item(2),d=g.elements.item(3);if(""===d.value){const t=new e(n.value,s.value);"today"===o.value?a.addTodo(t):"this week"===o.value?r.addTodo(t):"this month"===o.value&&c.addTodo(t)}else{const t=new e(n.value,s.value,d.value);"today"===o.value?a.addTodo(t):"this week"===o.value?r.addTodo(t):"this month"===o.value&&c.addTodo(t)}o.value="today",n.value="",s.value="",d.value="",g.classList.add("invisible"),l.sortTodos(),T()})),T()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,